diff --git a/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/auth/AuthResourceCreator.scala b/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/auth/AuthResourceCreator.scala
new file mode 100644
index 00000000..3f9683cd
--- /dev/null
+++ b/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/auth/AuthResourceCreator.scala
@@ -0,0 +1,8 @@
+package io.lenses.streamreactor.connect.aws.s3.auth
+import io.lenses.streamreactor.connect.aws.s3.config.S3Config
+import org.jclouds.blobstore.BlobStoreContext
+
+trait AuthResourceCreator {
+
+  def fromConfig(awsConfig: S3Config): BlobStoreContext
+}
diff --git a/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/auth/S3AuthContext.scala b/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/auth/S3AuthContext.scala
new file mode 100644
index 00000000..5da4a3a3
--- /dev/null
+++ b/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/auth/S3AuthContext.scala
@@ -0,0 +1,17 @@
+package io.lenses.streamreactor.connect.aws.s3.auth
+
+import io.lenses.streamreactor.connect.aws.s3.config.S3Config
+import org.jclouds.blobstore.BlobStoreContext
+import software.amazon.awssdk.services.s3.S3Client
+
+class S3AuthContext(awsConfig: S3Config) {
+
+  def createBlobStoreContext() : BlobStoreContext = {
+    new S3BlobStoreContextCreator(S3BlobStoreContextCreator.DefaultCredentialsFn).fromConfig(awsConfig)
+  }
+
+  def createS3Client() : S3Client = {
+
+  }
+
+}
diff --git a/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/auth/AwsContextCreator.scala b/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/auth/S3BlobStoreContextCreator.scala
similarity index 94%
rename from kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/auth/AwsContextCreator.scala
rename to kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/auth/S3BlobStoreContextCreator.scala
index a0351e77..9e7993ab 100644
--- a/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/auth/AwsContextCreator.scala
+++ b/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/auth/S3BlobStoreContextCreator.scala
@@ -27,7 +27,7 @@ import software.amazon.awssdk.auth.credentials.{AwsCredentialsProvider, AwsSessi
 
 import java.util.Properties
 
-object AwsContextCreator {
+object S3BlobStoreContextCreator {
 
   def DefaultCredentialsFn: () => AwsCredentialsProvider = {
     () => DefaultCredentialsProvider.create()
@@ -35,11 +35,11 @@ object AwsContextCreator {
 
 }
 
-class AwsContextCreator(credentialsProviderFn: () => AwsCredentialsProvider) {
+class S3BlobStoreContextCreator(credentialsProviderFn: () => AwsCredentialsProvider) extends AuthResourceCreator {
 
   private val missingCredentialsError = "Configured to use credentials however one or both of `AWS_ACCESS_KEY` or `AWS_SECRET_KEY` are missing."
 
-  def fromConfig(awsConfig: S3Config): BlobStoreContext = {
+  override def fromConfig(awsConfig: S3Config): BlobStoreContext = {
 
     val contextBuilder = ContextBuilder
       .newBuilder("aws-s3")
diff --git a/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/sink/S3SinkTask.scala b/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/sink/S3SinkTask.scala
index 1c7b3bfc..f7332f30 100644
--- a/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/sink/S3SinkTask.scala
+++ b/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/sink/S3SinkTask.scala
@@ -19,7 +19,7 @@ package io.lenses.streamreactor.connect.aws.s3.sink
 
 import com.datamountaineer.streamreactor.common.errors.{ErrorHandler, RetryErrorPolicy}
 import com.datamountaineer.streamreactor.common.utils.JarManifest
-import io.lenses.streamreactor.connect.aws.s3.auth.AwsContextCreator
+import io.lenses.streamreactor.connect.aws.s3.auth.S3BlobStoreContextCreator
 import io.lenses.streamreactor.connect.aws.s3.config.{S3Config, S3ConfigDefBuilder}
 import io.lenses.streamreactor.connect.aws.s3.model._
 import io.lenses.streamreactor.connect.aws.s3.sink.ThrowableEither.toJavaThrowableConverter
@@ -54,7 +54,7 @@ class S3SinkTask extends SinkTask with ErrorHandler {
     S3SinkConfig(S3ConfigDefBuilder(getSinkName(props), propsFromContext(props))) match {
       case Left(ex) => throw ex
       case Right(config) =>
-        val awsContextCreator = new AwsContextCreator(AwsContextCreator.DefaultCredentialsFn)
+        val awsContextCreator = new S3BlobStoreContextCreator(S3BlobStoreContextCreator.DefaultCredentialsFn)
         storageInterface = new MultipartBlobStoreStorageInterface(sinkName, awsContextCreator.fromConfig(config.s3Config))
         setErrorRetryInterval(config.s3Config)
 
diff --git a/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/source/S3SourceTask.scala b/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/source/S3SourceTask.scala
index 18c4de0d..d7640d8e 100644
--- a/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/source/S3SourceTask.scala
+++ b/kafka-connect-aws-s3/src/main/scala/io/lenses/streamreactor/connect/aws/s3/source/S3SourceTask.scala
@@ -17,7 +17,7 @@
 package io.lenses.streamreactor.connect.aws.s3.source
 
 import com.datamountaineer.streamreactor.common.utils.JarManifest
-import io.lenses.streamreactor.connect.aws.s3.auth.AwsContextCreator
+import io.lenses.streamreactor.connect.aws.s3.auth.S3BlobStoreContextCreator
 import io.lenses.streamreactor.connect.aws.s3.config.S3ConfigDefBuilder
 import io.lenses.streamreactor.connect.aws.s3.model._
 import io.lenses.streamreactor.connect.aws.s3.model.location.RemoteS3PathLocation
@@ -62,7 +62,7 @@ class S3SourceTask extends SourceTask {
 
     val awsConfig = S3SourceConfig(config)
 
-    val awsContextCreator = new AwsContextCreator(AwsContextCreator.DefaultCredentialsFn)
+    val awsContextCreator = new S3BlobStoreContextCreator(S3BlobStoreContextCreator.DefaultCredentialsFn)
     storageInterface = new MultipartBlobStoreStorageInterface("sink", awsContextCreator.fromConfig(awsConfig.s3Config))
     sourceLister = new S3SourceLister()
 
diff --git a/kafka-connect-aws-s3/src/test/scala/io/lenses/streamreactor/connect/aws/s3/auth/AwsContextCreatorTest.scala b/kafka-connect-aws-s3/src/test/scala/io/lenses/streamreactor/connect/aws/s3/auth/S3BlobStoreContextCreatorTest.scala
similarity index 95%
rename from kafka-connect-aws-s3/src/test/scala/io/lenses/streamreactor/connect/aws/s3/auth/AwsContextCreatorTest.scala
rename to kafka-connect-aws-s3/src/test/scala/io/lenses/streamreactor/connect/aws/s3/auth/S3BlobStoreContextCreatorTest.scala
index 222c3c43..e53b897b 100644
--- a/kafka-connect-aws-s3/src/test/scala/io/lenses/streamreactor/connect/aws/s3/auth/AwsContextCreatorTest.scala
+++ b/kafka-connect-aws-s3/src/test/scala/io/lenses/streamreactor/connect/aws/s3/auth/S3BlobStoreContextCreatorTest.scala
@@ -26,7 +26,7 @@ import org.scalatest.flatspec.AnyFlatSpec
 import org.scalatest.matchers.should.Matchers
 import software.amazon.awssdk.auth.credentials.{AwsCredentials, AwsCredentialsProvider}
 
-class AwsContextCreatorTest extends AnyFlatSpec with MockitoSugar with Matchers with BeforeAndAfter {
+class S3BlobStoreContextCreatorTest extends AnyFlatSpec with MockitoSugar with Matchers with BeforeAndAfter {
 
   private val AWS_ACCESS_KEY_ID = "awsAccessKeyId"
 
@@ -34,7 +34,7 @@ class AwsContextCreatorTest extends AnyFlatSpec with MockitoSugar with Matchers
   private val credentialsProvider = mock[AwsCredentialsProvider]
   private val credentialsProviderFn = mock[() => AwsCredentialsProvider]
 
-  private val target = new AwsContextCreator(credentialsProviderFn)
+  private val target = new S3BlobStoreContextCreator(credentialsProviderFn)
 
   before {
     reset(awsCredentials, credentialsProvider, credentialsProviderFn)
